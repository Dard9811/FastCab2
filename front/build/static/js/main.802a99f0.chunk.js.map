{"version":3,"sources":["components/ListaViajes/ListaViajes.jsx","components/DetalleServicio/DetalleServicio.jsx","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","className","viajes","map","viaje","key","_id","direccion","onClick","fetch","method","body","JSON","stringify","conductor","nombre","cedula","placa","carro","headers","then","res","console","log","catch","error","history","push","pathname","param","handleAccept","DetalleServicio","App","useState","viajesNuevos","setViajesNuevos","setErr","useEffect","ws","WebSocket","onopen","onmessage","msg","data","parse","json","err","Fragment","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6QAiDeA,mBA7Cf,SAAqBC,GA0BnB,OACE,yBAAKC,UAAU,aACZD,EAAME,OAAOC,KAAI,SAAAC,GAAK,OACrB,yBAAKH,UAAU,cAAcI,IAAKD,EAAME,KACtC,yBAAKL,UAAU,aACb,wBAAIA,UAAU,cAAcG,EAAMG,WAClC,4BACEN,UAAU,gBACVO,QAAS,kBAjCF,SAAAJ,GACjBK,MAAM,SAAU,CACdC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBT,MAAOA,EACPU,UAAWF,KAAKC,UAAU,CACxBE,OAAQ,kBACRC,OAAQ,WACRC,MAAO,UACPC,MAAO,sBAGXC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAI,QAASF,MACjCG,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAI,SAAUE,MAExCzB,EAAM0B,QAAQC,KAAK,CACjBC,SAAU,YACVC,MAAO,KAYgBC,CAAa1B,KAF9B,oBC9BG2B,MAJf,WACE,OAAO,sD,eCkDMC,MA/Cf,WAAgB,IAAD,EAC2BC,mBAAS,IADpC,mBACNC,EADM,KACQC,EADR,OAESF,mBAAS,IAFlB,mBAEDG,GAFC,WA+Bb,OA3BAC,qBAAU,WACR,IAAMC,EAAK,IAAIC,UAAU,sCAIzBD,EAAGE,OAAS,WACVlB,QAAQC,IAAI,cACZe,EAAGG,UAAY,SAAAC,GAGLA,EAAIC,KACZR,EAAgBvB,KAAKgC,MAAMF,EAAIC,SAKnClC,MAAM,QACHW,MAAK,SAAAC,GAAG,OAAIA,EAAIwB,UAChBzB,MAAK,SAAAuB,GACAA,EAAKG,IACPV,EAAOxB,KAAKC,UAAU8B,EAAKG,MAE3BX,EAAgBQ,QAGrB,IAGD,kBAAC,IAAMI,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,UAAW,kBAAM,kBAAC,EAAD,CAAahD,OAAQgC,OAExC,kBAAC,IAAD,CAAOe,KAAK,YAAYC,UAAW,kBAAM,kBAAC,EAAD,aClC/BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,kB","file":"static/js/main.802a99f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ListaViajes.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nfunction ListaViajes(props) {\r\n  let handleAccept = viaje => {\r\n    fetch(\"accept\", {\r\n      method: \"POST\", // or 'PUT'\r\n      body: JSON.stringify({\r\n        viaje: viaje,\r\n        conductor: JSON.stringify({\r\n          nombre: \"Francisco Devia\",\r\n          cedula: \"19431215\",\r\n          placa: \"RGU-429\",\r\n          carro: \"Chevrolet Spark\"\r\n        })\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(res => console.log(\"Exito\", res))\r\n      .catch(error => console.log(\"Error:\", error));\r\n\r\n    props.history.push({\r\n      pathname: \"/servicio\",\r\n      param: {}\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {props.viajes.map(viaje => (\r\n        <div className=\"card shadow\" key={viaje._id}>\r\n          <div className=\"card-body\">\r\n            <h4 className=\"card-title\">{viaje.direccion}</h4>\r\n            <button\r\n              className=\"botonAmarillo\"\r\n              onClick={() => handleAccept(viaje)}\r\n            >\r\n              Aceptar\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(ListaViajes);\r\n","import React from \"react\";\r\n\r\nfunction DetalleServicio() {\r\n  return <h1>Detalles del Servicio</h1>;\r\n}\r\n\r\nexport default DetalleServicio;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ListaViajes from \"./components/ListaViajes/ListaViajes\";\r\nimport DetalleServicio from \"./components/DetalleServicio/DetalleServicio\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [viajesNuevos, setViajesNuevos] = useState([]);\r\n  const [err, setErr] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const ws = new WebSocket(\"wss://taxis-whatsapp.herokuapp.com\");\r\n    //const ws = new WebSocket(\"ws://localhost:3001\");\r\n\r\n    //abre el socket\r\n    ws.onopen = () => {\r\n      console.log(\"open my ws\");\r\n      ws.onmessage = msg => {\r\n        var x = [];\r\n\r\n        var x = msg.data;\r\n        setViajesNuevos(JSON.parse(msg.data));\r\n      };\r\n    };\r\n\r\n    //pide los viajes nuevos\r\n    fetch(\"data\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.err) {\r\n          setErr(JSON.stringify(data.err));\r\n        } else {\r\n          setViajesNuevos(data);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            component={() => <ListaViajes viajes={viajesNuevos} />}\r\n          />\r\n          <Route path=\"/servicio\" component={() => <DetalleServicio />} />\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}